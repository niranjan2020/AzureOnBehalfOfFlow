{"ast":null,"code":"import React__default, { createContext, useEffect, useMemo, useState, useContext, useCallback } from 'react';\nimport { stubbedPublicClientApplication, InteractionStatus, Logger, WrapperSKU, EventType, EventMessageUtils, AccountEntity, InteractionType } from '@azure/msal-browser';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/*\r\n * Stubbed context implementation\r\n * Only used when there is no provider, which is an unsupported scenario\r\n */\n\nconst defaultMsalContext = {\n  instance: stubbedPublicClientApplication,\n  inProgress: InteractionStatus.None,\n  accounts: [],\n  logger: /*#__PURE__*/new Logger({})\n};\nconst MsalContext = /*#__PURE__*/createContext(defaultMsalContext);\nconst MsalConsumer = MsalContext.Consumer;\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction getChildrenOrFunction(children, args) {\n  if (typeof children === \"function\") {\n    return children(args);\n  }\n\n  return children;\n}\n/**\r\n * Helper function to determine whether 2 arrays are equal\r\n * Used to avoid unnecessary state updates\r\n * @param arrayA\r\n * @param arrayB\r\n */\n\n\nfunction accountArraysAreEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n\n  const comparisonArray = [...arrayB];\n  return arrayA.every(elementA => {\n    const elementB = comparisonArray.shift();\n\n    if (!elementA || !elementB) {\n      return false;\n    }\n\n    return elementA.homeAccountId === elementB.homeAccountId && elementA.localAccountId === elementB.localAccountId && elementA.username === elementB.username;\n  });\n}\n/* eslint-disable header/header */\n\n\nconst name = \"@azure/msal-react\";\nconst version = \"1.0.0\";\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction MsalProvider({\n  instance,\n  children\n}) {\n  useEffect(() => {\n    instance.initializeWrapperLibrary(WrapperSKU.React, version);\n  }, [instance]); // Create a logger instance for msal-react with the same options as PublicClientApplication\n\n  const logger = useMemo(() => {\n    return instance.getLogger().clone(name, version);\n  }, [instance]); // State hook to store accounts\n\n  const [accounts, setAccounts] = useState([]); // State hook to store in progress value\n\n  const [inProgress, setInProgress] = useState(InteractionStatus.Startup);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      switch (message.eventType) {\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n        case EventType.HANDLE_REDIRECT_END:\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n        case EventType.LOGOUT_END:\n        case EventType.ACQUIRE_TOKEN_SUCCESS:\n        case EventType.ACQUIRE_TOKEN_FAILURE:\n          const currentAccounts = instance.getAllAccounts();\n\n          if (!accountArraysAreEqual(currentAccounts, accounts)) {\n            logger.info(\"MsalProvider - updating account state\");\n            setAccounts(currentAccounts);\n          } else {\n            logger.info(\"MsalProvider - no account changes\");\n          }\n\n          break;\n      }\n    });\n    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n    return () => {\n      // Remove callback when component unmounts or accounts change\n      if (callbackId) {\n        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, accounts, logger]);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n\n      if (status !== null) {\n        logger.info(`MsalProvider - ${message.eventType} results in setting inProgress to ${status}`);\n        setInProgress(status);\n      }\n    });\n    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n    instance.handleRedirectPromise().catch(() => {\n      // Errors should be handled by listening to the LOGIN_FAILURE event\n      return;\n    });\n    return () => {\n      if (callbackId) {\n        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  const contextValue = {\n    instance,\n    inProgress,\n    accounts,\n    logger\n  };\n  return React__default.createElement(MsalContext.Provider, {\n    value: contextValue\n  }, children);\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Returns Msal Context values\r\n */\n\n\nconst useMsal = () => useContext(MsalContext);\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction getAccount(instance, accountIdentifiers) {\n  const allAccounts = instance.getAllAccounts();\n\n  if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n    const matchedAccounts = allAccounts.filter(accountObj => {\n      if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n        return false;\n      }\n\n      return true;\n    });\n    return matchedAccounts[0] || null;\n  } else {\n    return null;\n  }\n}\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useAccount(accountIdentifiers) {\n  const {\n    instance,\n    inProgress\n  } = useMsal();\n  const initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\n  const [account, setAccount] = useState(initialStateValue);\n  useEffect(() => {\n    const currentAccount = getAccount(instance, accountIdentifiers);\n\n    if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\n      setAccount(currentAccount);\n    }\n  }, [inProgress, accountIdentifiers, instance, account]);\n  return account;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction isAuthenticated(allAccounts, account, matchAccount) {\n  if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n    return !!account;\n  }\n\n  return allAccounts.length > 0;\n}\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount\r\n */\n\n\nfunction useIsAuthenticated(matchAccount) {\n  const {\n    accounts: allAccounts,\n    inProgress\n  } = useMsal();\n  const account = useAccount(matchAccount || {});\n  const initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\n  const [hasAuthenticated, setHasAuthenticated] = useState(initialStateValue);\n  useEffect(() => {\n    setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\n  }, [allAccounts, account, matchAccount]);\n  return hasAuthenticated;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is authenticated\r\n * @param props\r\n */\n\n\nfunction AuthenticatedTemplate({\n  username,\n  homeAccountId,\n  localAccountId,\n  children\n}) {\n  const context = useMsal();\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is unauthenticated\r\n * @param props\r\n */\n\n\nfunction UnauthenticatedTemplate({\n  username,\n  homeAccountId,\n  localAccountId,\n  children\n}) {\n  const context = useMsal();\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\r\n * Optionally provide a request object to be used in the login call.\r\n * Optionally provide a specific user that should be logged in.\r\n * @param interactionType\r\n * @param authenticationRequest\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useMsalAuthentication(interactionType, authenticationRequest, accountIdentifiers) {\n  const {\n    instance,\n    inProgress,\n    logger\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n  const [[result, error], setResponse] = useState([null, null]);\n  const [hasBeenCalled, setHasBeenCalled] = useState(false);\n  const login = useCallback(async (callbackInteractionType, callbackRequest) => {\n    const loginType = callbackInteractionType || interactionType;\n    const loginRequest = callbackRequest || authenticationRequest;\n\n    switch (loginType) {\n      case InteractionType.Popup:\n        logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n        return instance.loginPopup(loginRequest);\n\n      case InteractionType.Redirect:\n        // This promise is not expected to resolve due to full frame redirect\n        logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n        return instance.loginRedirect(loginRequest).then(null);\n\n      case InteractionType.Silent:\n        logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n        return instance.ssoSilent(loginRequest);\n\n      default:\n        throw \"Invalid interaction type provided.\";\n    }\n  }, [instance, interactionType, authenticationRequest, logger]);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      switch (message.eventType) {\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n          if (message.payload) {\n            setResponse([message.payload, null]);\n          }\n\n          break;\n\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n          if (message.error) {\n            setResponse([null, message.error]);\n          }\n\n          break;\n      }\n    });\n    logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n    return () => {\n      if (callbackId) {\n        logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  useEffect(() => {\n    if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\n      logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\"); // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\n\n      setHasBeenCalled(true);\n      login().catch(() => {\n        // Errors are handled by the event handler above\n        return;\n      });\n    }\n  }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\n  return {\n    login,\n    result,\n    error\n  };\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Attempts to authenticate user if not already authenticated, then renders child components\r\n * @param props\r\n */\n\n\nfunction MsalAuthenticationTemplate({\n  interactionType,\n  username,\n  homeAccountId,\n  localAccountId,\n  authenticationRequest,\n  loadingComponent: LoadingComponent,\n  errorComponent: ErrorComponent,\n  children\n}) {\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const context = useMsal();\n  const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n    if (!!ErrorComponent) {\n      return React__default.createElement(ErrorComponent, Object.assign({}, msalAuthResult));\n    }\n\n    throw msalAuthResult.error;\n  }\n\n  if (isAuthenticated) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, msalAuthResult));\n  }\n\n  if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n    return React__default.createElement(LoadingComponent, Object.assign({}, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props\r\n * @param Component\r\n */\n\n\nconst withMsal = Component => {\n  const ComponentWithMsal = props => {\n    const msal = useMsal();\n    return React__default.createElement(Component, Object.assign({}, props, {\n      msalContext: msal\n    }));\n  };\n\n  const componentName = Component.displayName || Component.name || \"Component\";\n  ComponentWithMsal.displayName = `withMsal(${componentName})`;\n  return ComponentWithMsal;\n};\n\nexport { AuthenticatedTemplate, MsalAuthenticationTemplate, MsalConsumer, MsalContext, MsalProvider, UnauthenticatedTemplate, useAccount, useIsAuthenticated, useMsal, useMsalAuthentication, withMsal };","map":{"version":3,"sources":["../src/MsalContext.ts","../src/utils/utilities.ts","../src/packageMetadata.ts","../src/MsalProvider.tsx","../src/hooks/useMsal.ts","../src/hooks/useAccount.ts","../src/hooks/useIsAuthenticated.ts","../src/components/AuthenticatedTemplate.tsx","../src/components/UnauthenticatedTemplate.tsx","../src/hooks/useMsalAuthentication.ts","../src/components/MsalAuthenticationTemplate.tsx","../src/components/withMsal.tsx"],"names":["defaultMsalContext","instance","inProgress","InteractionStatus","accounts","logger","MsalContext","React","MsalConsumer","Consumer","getChildrenOrFunction","children","args","accountArraysAreEqual","arrayA","arrayB","comparisonArray","elementA","elementB","name","version","MsalProvider","useEffect","WrapperSKU","useMemo","useState","callbackId","message","EventType","currentAccounts","setAccounts","status","EventMessageUtils","eventType","setInProgress","contextValue","value","useMsal","useContext","allAccounts","accountIdentifiers","matchedAccounts","accountObj","useAccount","initialStateValue","getAccount","currentAccount","AccountEntity","setAccount","matchAccount","useIsAuthenticated","account","isAuthenticated","setHasAuthenticated","AuthenticatedTemplate","context","accountIdentifier","localAccountId","UnauthenticatedTemplate","useMsalAuthentication","interactionType","authenticationRequest","login","useCallback","loginType","callbackInteractionType","loginRequest","callbackRequest","InteractionType","setResponse","setHasBeenCalled","error","MsalAuthenticationTemplate","loadingComponent","errorComponent","msalAuthResult","withMsal","Component","ComponentWithMsal","props","msal","msalContext","componentName"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport * as React from \"react\";\r\nimport { IPublicClientApplication, stubbedPublicClientApplication, Logger, InteractionStatus } from \"@azure/msal-browser\";\r\nimport { AccountIdentifiers } from \"./types/AccountIdentifiers\";\r\n\r\nexport interface IMsalContext {\r\n    instance: IPublicClientApplication;\r\n    inProgress: InteractionStatus;\r\n    accounts: AccountIdentifiers[];\r\n    logger: Logger;\r\n}\r\n\r\n/*\r\n * Stubbed context implementation\r\n * Only used when there is no provider, which is an unsupported scenario\r\n */\r\nconst defaultMsalContext: IMsalContext = {\r\n    instance: stubbedPublicClientApplication,\r\n    inProgress: InteractionStatus.None,\r\n    accounts: [],\r\n    logger: new Logger({})\r\n};\r\n\r\nexport const MsalContext = React.createContext<IMsalContext>(\r\n    defaultMsalContext\r\n);\r\nexport const MsalConsumer = MsalContext.Consumer;\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\r\n\r\ntype FaaCFunction = <T>(args: T) => React.ReactNode;\r\n\r\nexport function getChildrenOrFunction<T>(\r\n    children: React.ReactNode | FaaCFunction,\r\n    args: T\r\n): React.ReactNode {\r\n    if (typeof children === \"function\") {\r\n        return children(args);\r\n    }\r\n    return children;\r\n}\r\n\r\n/*\r\n * Utility types\r\n * Reference: https://github.com/piotrwitek/utility-types\r\n */\r\ntype SetDifference<A, B> = A extends B ? never : A;\r\ntype SetComplement<A, A1 extends A> = SetDifference<A, A1>;\r\nexport type Subtract<T extends T1, T1 extends object> = Pick<T,SetComplement<keyof T, keyof T1>>;\r\n\r\n/**\r\n * Helper function to determine whether 2 arrays are equal\r\n * Used to avoid unnecessary state updates\r\n * @param arrayA \r\n * @param arrayB \r\n */\r\nexport function accountArraysAreEqual(arrayA: Array<AccountIdentifiers>, arrayB: Array<AccountIdentifiers>): boolean {\r\n    if (arrayA.length !== arrayB.length) {\r\n        return false;\r\n    }\r\n\r\n    const comparisonArray = [...arrayB];\r\n\r\n    return arrayA.every((elementA) => {\r\n        const elementB = comparisonArray.shift();\r\n        if (!elementA || !elementB) {\r\n            return false;\r\n        }\r\n\r\n        return (elementA.homeAccountId === elementB.homeAccountId) && \r\n               (elementA.localAccountId === elementB.localAccountId) &&\r\n               (elementA.username === elementB.username);\r\n    });\r\n}\r\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-react\";\nexport const version = \"1.0.0\";\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React, { useState, useEffect, PropsWithChildren, useMemo } from \"react\";\r\nimport {\r\n    IPublicClientApplication,\r\n    EventType,\r\n    EventMessage,\r\n    EventMessageUtils,\r\n    InteractionStatus,\r\n    Logger,\r\n    WrapperSKU\r\n} from \"@azure/msal-browser\";\r\nimport { MsalContext, IMsalContext } from \"./MsalContext\";\r\nimport { accountArraysAreEqual } from \"./utils/utilities\";\r\nimport { AccountIdentifiers } from \"./types/AccountIdentifiers\";\r\nimport { name as SKU, version } from \"./packageMetadata\";\r\n\r\nexport type MsalProviderProps = PropsWithChildren<{\r\n    instance: IPublicClientApplication;\r\n}>;\r\n\r\nexport function MsalProvider({instance, children}: MsalProviderProps): React.ReactElement {\r\n    useEffect(() => {\r\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\r\n    }, [instance]);\r\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\r\n    const logger: Logger = useMemo(() => {\r\n        return instance.getLogger().clone(SKU, version);\r\n    }, [instance]);\r\n\r\n    // State hook to store accounts\r\n    const [accounts, setAccounts] = useState<AccountIdentifiers[]>([]);\r\n    // State hook to store in progress value\r\n    const [inProgress, setInProgress] = useState<InteractionStatus>(InteractionStatus.Startup);\r\n\r\n    useEffect(() => {\r\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\r\n            switch (message.eventType) {\r\n                case EventType.LOGIN_SUCCESS:\r\n                case EventType.SSO_SILENT_SUCCESS:\r\n                case EventType.HANDLE_REDIRECT_END:\r\n                case EventType.LOGIN_FAILURE:\r\n                case EventType.SSO_SILENT_FAILURE:\r\n                case EventType.LOGOUT_END:\r\n                case EventType.ACQUIRE_TOKEN_SUCCESS:\r\n                case EventType.ACQUIRE_TOKEN_FAILURE:\r\n                    const currentAccounts = instance.getAllAccounts();\r\n                    if (!accountArraysAreEqual(currentAccounts, accounts)) {\r\n                        logger.info(\"MsalProvider - updating account state\");\r\n                        setAccounts(currentAccounts);\r\n                    } else {\r\n                        logger.info(\"MsalProvider - no account changes\");\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\r\n\r\n        return () => {\r\n            // Remove callback when component unmounts or accounts change\r\n            if (callbackId) {\r\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\r\n                instance.removeEventCallback(callbackId);\r\n            }\r\n        };\r\n    }, [instance, accounts, logger]);\r\n\r\n    useEffect(() => {\r\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\r\n            if (status !== null) {\r\n                logger.info(`MsalProvider - ${message.eventType} results in setting inProgress to ${status}`);\r\n                setInProgress(status);\r\n            }\r\n        });\r\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\r\n\r\n        instance.handleRedirectPromise().catch(() => {\r\n            // Errors should be handled by listening to the LOGIN_FAILURE event\r\n            return;\r\n        });\r\n\r\n        return () => {\r\n            if (callbackId) {\r\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\r\n                instance.removeEventCallback(callbackId);\r\n            }\r\n        };\r\n    }, [instance, logger]);\r\n\r\n    const contextValue: IMsalContext = {\r\n        instance,\r\n        inProgress,\r\n        accounts,\r\n        logger\r\n    };\r\n\r\n    return (\r\n        <MsalContext.Provider value={contextValue}>\r\n            {children}\r\n        </MsalContext.Provider>\r\n    );\r\n}\r\n\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { useContext } from \"react\";\r\nimport { IMsalContext, MsalContext } from \"../MsalContext\";\r\n\r\n/**\r\n * Returns Msal Context values\r\n */\r\nexport const useMsal = (): IMsalContext => useContext(MsalContext);\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { AccountInfo, IPublicClientApplication, InteractionStatus, AccountEntity } from \"@azure/msal-browser\";\r\nimport { useMsal } from \"./useMsal\";\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\r\n\r\nfunction getAccount(instance: IPublicClientApplication, accountIdentifiers: AccountIdentifiers): AccountInfo | null {\r\n    const allAccounts = instance.getAllAccounts();\r\n    if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\r\n        const matchedAccounts = allAccounts.filter(accountObj => {\r\n            if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\r\n                return false;\r\n            }\r\n            if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\r\n                return false;\r\n            }\r\n            if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        return matchedAccounts[0] || null;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers \r\n */\r\nexport function useAccount(accountIdentifiers: AccountIdentifiers): AccountInfo | null {\r\n    const { instance, inProgress } = useMsal();\r\n\r\n    const initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\r\n    const [account, setAccount] = useState<AccountInfo|null>(initialStateValue);\r\n\r\n    useEffect(() => {\r\n        const currentAccount = getAccount(instance, accountIdentifiers);\r\n        if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\r\n            setAccount(currentAccount);\r\n        }\r\n    }, [inProgress, accountIdentifiers, instance, account]);\r\n\r\n    return account;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useMsal } from \"./useMsal\";\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\r\nimport { useAccount } from \"./useAccount\";\r\nimport { AccountInfo, InteractionStatus } from \"@azure/msal-browser\";\r\n\r\nfunction isAuthenticated(allAccounts: AccountIdentifiers[], account: AccountInfo | null, matchAccount?: AccountIdentifiers): boolean {\r\n    if(matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\r\n        return !!account;\r\n    }   \r\n\r\n    return allAccounts.length > 0;\r\n}\r\n\r\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount \r\n */\r\nexport function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean {\r\n    const { accounts: allAccounts, inProgress } = useMsal();\r\n    const account = useAccount(matchAccount || {});\r\n\r\n    const initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\r\n    const [hasAuthenticated, setHasAuthenticated] = useState<boolean>(initialStateValue);\r\n\r\n    useEffect(() => {\r\n        setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\r\n    }, [allAccounts, account, matchAccount]);\r\n\r\n    return hasAuthenticated;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React, { PropsWithChildren, useMemo } from \"react\";\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\r\nimport { getChildrenOrFunction } from \"../utils/utilities\";\r\nimport { useMsal } from \"../hooks/useMsal\";\r\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\r\nimport { InteractionStatus } from \"@azure/msal-browser\";\r\n\r\nexport type AuthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\r\n\r\n/**\r\n * Renders child components if user is authenticated\r\n * @param props \r\n */\r\nexport function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children }: AuthenticatedTemplateProps): React.ReactElement|null {\r\n    const context = useMsal();\r\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\r\n        return {\r\n            username,\r\n            homeAccountId,\r\n            localAccountId\r\n        };\r\n    }, [username, homeAccountId, localAccountId]);\r\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\r\n\r\n    if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\r\n        return (\r\n            <React.Fragment>\r\n                {getChildrenOrFunction(children, context)}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React, { PropsWithChildren, useMemo } from \"react\";\r\nimport { useMsal } from \"../hooks/useMsal\";\r\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\r\nimport { getChildrenOrFunction } from \"../utils/utilities\";\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\r\nimport { InteractionStatus } from \"@azure/msal-browser\";\r\n\r\nexport type UnauthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\r\n\r\n/**\r\n * Renders child components if user is unauthenticated\r\n * @param props \r\n */\r\nexport function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children }: UnauthenticatedTemplateProps): React.ReactElement|null {\r\n    const context = useMsal();\r\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\r\n        return {\r\n            username,\r\n            homeAccountId,\r\n            localAccountId\r\n        };\r\n    }, [username, homeAccountId, localAccountId]);\r\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\r\n\r\n    if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\r\n        return (\r\n            <React.Fragment>\r\n                {getChildrenOrFunction(children, context)}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { PopupRequest, RedirectRequest, SsoSilentRequest, InteractionType, AuthenticationResult, AuthError, EventMessage, EventType, InteractionStatus } from \"@azure/msal-browser\";\r\nimport { useIsAuthenticated } from \"./useIsAuthenticated\";\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\r\nimport { useMsal } from \"./useMsal\";\r\n\r\nexport type MsalAuthenticationResult = {\r\n    login: Function; \r\n    result: AuthenticationResult|null;\r\n    error: AuthError|null;\r\n};\r\n\r\n/**\r\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\r\n * Optionally provide a request object to be used in the login call.\r\n * Optionally provide a specific user that should be logged in.\r\n * @param interactionType \r\n * @param authenticationRequest \r\n * @param accountIdentifiers \r\n */\r\nexport function useMsalAuthentication(\r\n    interactionType: InteractionType, \r\n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest, \r\n    accountIdentifiers?: AccountIdentifiers\r\n): MsalAuthenticationResult {\r\n    const { instance, inProgress, logger } = useMsal();\r\n    const isAuthenticated = useIsAuthenticated(accountIdentifiers);\r\n    const [[result, error], setResponse] = useState<[AuthenticationResult|null, AuthError|null]>([null, null]);\r\n    const [hasBeenCalled, setHasBeenCalled] = useState<boolean>(false);\r\n\r\n    const login = useCallback(async (callbackInteractionType?: InteractionType, callbackRequest?: PopupRequest|RedirectRequest|SsoSilentRequest): Promise<AuthenticationResult|null> => {\r\n        const loginType = callbackInteractionType || interactionType;\r\n        const loginRequest = callbackRequest || authenticationRequest;\r\n        switch (loginType) {\r\n            case InteractionType.Popup:\r\n                logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\r\n                return instance.loginPopup(loginRequest as PopupRequest);\r\n            case InteractionType.Redirect:\r\n                // This promise is not expected to resolve due to full frame redirect\r\n                logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\r\n                return instance.loginRedirect(loginRequest as RedirectRequest).then(null);\r\n            case InteractionType.Silent:\r\n                logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\r\n                return instance.ssoSilent(loginRequest as SsoSilentRequest);\r\n            default:\r\n                throw \"Invalid interaction type provided.\";\r\n        }\r\n    }, [instance, interactionType, authenticationRequest, logger]);\r\n\r\n    useEffect(() => {\r\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\r\n            switch(message.eventType) {\r\n                case EventType.LOGIN_SUCCESS:\r\n                case EventType.SSO_SILENT_SUCCESS:\r\n                    if (message.payload) {\r\n                        setResponse([message.payload as AuthenticationResult, null]);\r\n                    }\r\n                    break;\r\n                case EventType.LOGIN_FAILURE:\r\n                case EventType.SSO_SILENT_FAILURE:\r\n                    if (message.error) {\r\n                        setResponse([null, message.error as AuthError]);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\r\n\r\n        return () => {\r\n            if (callbackId) {\r\n                logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\r\n                instance.removeEventCallback(callbackId);\r\n            }\r\n        };\r\n    }, [instance, logger]);\r\n\r\n    useEffect(() => {\r\n        if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\r\n            logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\r\n            // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\r\n            setHasBeenCalled(true);\r\n            login().catch(() => {\r\n                // Errors are handled by the event handler above\r\n                return;\r\n            });\r\n        }\r\n    }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\r\n\r\n    return { login, result, error };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React, { PropsWithChildren, useMemo } from \"react\";\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\r\nimport { getChildrenOrFunction } from \"../utils/utilities\";\r\nimport { useMsal } from \"../hooks/useMsal\";\r\nimport { MsalAuthenticationResult, useMsalAuthentication } from \"../hooks/useMsalAuthentication\";\r\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\r\nimport { InteractionType, PopupRequest, RedirectRequest, SsoSilentRequest, InteractionStatus } from \"@azure/msal-browser\";\r\nimport { IMsalContext } from \"../MsalContext\";\r\n\r\nexport type MsalAuthenticationProps = PropsWithChildren<AccountIdentifiers & {\r\n    interactionType: InteractionType;\r\n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest;\r\n    loadingComponent?: React.ElementType<IMsalContext>;\r\n    errorComponent?: React.ElementType<MsalAuthenticationResult>;\r\n}>;\r\n\r\n/**\r\n * Attempts to authenticate user if not already authenticated, then renders child components\r\n * @param props\r\n */\r\nexport function MsalAuthenticationTemplate({ \r\n    interactionType, \r\n    username, \r\n    homeAccountId, \r\n    localAccountId,\r\n    authenticationRequest, \r\n    loadingComponent: LoadingComponent,\r\n    errorComponent: ErrorComponent,\r\n    children \r\n}: MsalAuthenticationProps): React.ReactElement|null {\r\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\r\n        return {\r\n            username,\r\n            homeAccountId,\r\n            localAccountId\r\n        };\r\n    }, [username, homeAccountId, localAccountId]);\r\n    const context = useMsal();\r\n    const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\r\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\r\n\r\n    if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\r\n        if (!!ErrorComponent) {\r\n            return <ErrorComponent {...msalAuthResult} />;\r\n        }\r\n\r\n        throw msalAuthResult.error;\r\n    }\r\n    \r\n    if (isAuthenticated) {\r\n        return (\r\n            <React.Fragment>\r\n                {getChildrenOrFunction(children, msalAuthResult)}\r\n            </React.Fragment>\r\n        );\r\n    } \r\n    \r\n    if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\r\n        return <LoadingComponent {...context} />;\r\n    }\r\n\r\n    return null;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React from \"react\";\r\nimport { IMsalContext } from \"../MsalContext\";\r\nimport { useMsal } from \"../hooks/useMsal\";\r\nimport { Subtract } from \"../utils/utilities\";\r\n\r\nexport type WithMsalProps = {\r\n    msalContext: IMsalContext;\r\n};\r\n\r\n/**\r\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props \r\n * @param Component \r\n */\r\nexport const withMsal = <P extends WithMsalProps>(Component: React.ComponentType<P>): React.FunctionComponent<Subtract<P,WithMsalProps>> => {\r\n    const ComponentWithMsal: React.FunctionComponent<Subtract<P,WithMsalProps>> = props => {\r\n        const msal = useMsal();\r\n        return <Component {...(props as P)} msalContext={msal} />;\r\n    };\r\n\r\n    const componentName =\r\n        Component.displayName || Component.name || \"Component\";\r\n    ComponentWithMsal.displayName = `withMsal(${componentName})`;\r\n\r\n    return ComponentWithMsal;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}