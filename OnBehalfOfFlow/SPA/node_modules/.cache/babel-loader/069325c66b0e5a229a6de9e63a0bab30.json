{"ast":null,"code":"/*! @azure/msal-common v4.3.0 2021-05-12 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\n\nvar AuthToken =\n/** @class */\nfunction () {\n  function AuthToken(rawToken, crypto) {\n    if (StringUtils.isEmpty(rawToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n    }\n\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\r\n   * Extract token by decoding the rawToken\r\n   *\r\n   * @param encodedToken\r\n   */\n\n\n  AuthToken.extractTokenClaims = function (encodedToken, crypto) {\n    var decodedToken = StringUtils.decodeAuthToken(encodedToken); // token will be decoded to get the username\n\n    try {\n      var base64TokenPayload = decodedToken.JWSPayload; // base64Decode() should throw an error if there is an issue\n\n      var base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError.createTokenParsingError(err);\n    }\n  };\n\n  return AuthToken;\n}();\n\nexport { AuthToken };","map":{"version":3,"sources":["../../src/account/AuthToken.ts"],"names":[],"mappings":";;;;;AAAA;;;;;AAWA;;;;;;;AASI,WAAA,SAAA,CAAY,QAAZ,EAA8B,MAA9B,EAA6C;AACzC,QAAI,WAAW,CAAC,OAAZ,CAAoB,QAApB,CAAJ,EAAmC;AAC/B,YAAM,eAAe,CAAC,2BAAhB,CAA4C,QAA5C,CAAN;AACH;;AAED,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,MAAL,GAAc,SAAS,CAAC,kBAAV,CAA6B,QAA7B,EAAuC,MAAvC,CAAd;AACH;;;;;;;;AAOM,EAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,YAA1B,EAAgD,MAAhD,EAA+D;AAE3D,QAAM,YAAY,GAAqB,WAAW,CAAC,eAAZ,CAA4B,YAA5B,CAAvC,CAF2D,C;;AAK3D,QAAI;AACA,UAAM,kBAAkB,GAAG,YAAY,CAAC,UAAxC,CADA,C;;AAIA,UAAM,aAAa,GAAG,MAAM,CAAC,YAAP,CAAoB,kBAApB,CAAtB;AACA,aAAO,IAAI,CAAC,KAAL,CAAW,aAAX,CAAP;AACH,KAND,CAME,OAAO,GAAP,EAAY;AACV,YAAM,eAAe,CAAC,uBAAhB,CAAwC,GAAxC,CAAN;AACH;AACJ,GAdM;;AAeX,SAAA,SAAA;AAAC,C","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { TokenClaims } from \"./TokenClaims\";\r\nimport { DecodedAuthToken } from \"./DecodedAuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\n\r\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\r\nexport class AuthToken {\r\n\r\n    // Raw Token string\r\n    rawToken: string;\r\n    // Claims inside token\r\n    claims: TokenClaims;\r\n    constructor(rawToken: string, crypto: ICrypto) {\r\n        if (StringUtils.isEmpty(rawToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\r\n        }\r\n\r\n        this.rawToken = rawToken;\r\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\r\n    }\r\n\r\n    /**\r\n     * Extract token by decoding the rawToken\r\n     *\r\n     * @param encodedToken\r\n     */\r\n    static extractTokenClaims(encodedToken: string, crypto: ICrypto): TokenClaims {\r\n\r\n        const decodedToken: DecodedAuthToken = StringUtils.decodeAuthToken(encodedToken);\r\n\r\n        // token will be decoded to get the username\r\n        try {\r\n            const base64TokenPayload = decodedToken.JWSPayload;\r\n\r\n            // base64Decode() should throw an error if there is an issue\r\n            const base64Decoded = crypto.base64Decode(base64TokenPayload);\r\n            return JSON.parse(base64Decoded) as TokenClaims;\r\n        } catch (err) {\r\n            throw ClientAuthError.createTokenParsingError(err);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}