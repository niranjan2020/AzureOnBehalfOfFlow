{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MicroServices\\\\SPA\\\\src\\\\pages\\\\Hello.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { MsalAuthenticationTemplate, useMsal, useAccount } from \"@azure/msal-react\";\nimport { InteractionRequiredAuthError, InteractionType } from \"@azure/msal-browser\";\nimport { loginRequest, protectedResources } from \"../authConfig\";\nimport { callApiWithToken } from \"../fetch\";\nimport { HelloData } from \"../components/DataDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HelloContent = () => {\n  _s();\n\n  /**\r\n   * useMsal is hook that returns the PublicClientApplication instance, \r\n   * an array of all accounts currently signed in and an inProgress value \r\n   * that tells you what msal is currently doing. For more, visit: \r\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n   */\n  const {\n    instance,\n    accounts,\n    inProgress\n  } = useMsal();\n  const account = useAccount(accounts[0] || {});\n  const [helloData, setHelloData] = useState(null);\n  useEffect(() => {\n    if (account && inProgress === \"none\" && !helloData) {\n      instance.acquireTokenSilent({\n        scopes: protectedResources.apiHello.scopes,\n        account: account\n      }).then(response => {\n        callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint).then(response => setHelloData(response));\n      }).catch(error => {\n        // in case if silent token acquisition fails, fallback to an interactive method\n        if (error instanceof InteractionRequiredAuthError) {\n          if (account && inProgress === \"none\") {\n            instance.acquireTokenPopup({\n              scopes: protectedResources.apiHello.scopes\n            }).then(response => {\n              callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint).then(response => setHelloData(response));\n            }).catch(error => console.log(error));\n          }\n        }\n      });\n    }\n  }, [account, inProgress, instance]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: helloData ? /*#__PURE__*/_jsxDEV(HelloData, {\n      helloData: helloData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 27\n    }, this) : null\n  }, void 0, false);\n};\n/**\r\n * The `MsalAuthenticationTemplate` component will render its children if a user is authenticated \r\n * or attempt to sign a user in. Just provide it with the interaction type you would like to use \r\n * (redirect or popup) and optionally a [request object](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md)\r\n * to be passed to the login API, a component to display while authentication is in progress or a component to display if an error occurs. For more, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\n\n\n_s(HelloContent, \"a53SmMZ5G8BSbJ2OemZf3yTVlig=\", false, function () {\n  return [useMsal, useAccount];\n});\n\n_c = HelloContent;\nexport const Hello = () => {\n  const authRequest = { ...loginRequest\n  };\n  return /*#__PURE__*/_jsxDEV(MsalAuthenticationTemplate, {\n    interactionType: InteractionType.Redirect,\n    authenticationRequest: authRequest,\n    children: /*#__PURE__*/_jsxDEV(HelloContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Hello;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HelloContent\");\n$RefreshReg$(_c2, \"Hello\");","map":{"version":3,"sources":["C:/Users/MicroServices/SPA/src/pages/Hello.jsx"],"names":["useEffect","useState","MsalAuthenticationTemplate","useMsal","useAccount","InteractionRequiredAuthError","InteractionType","loginRequest","protectedResources","callApiWithToken","HelloData","HelloContent","instance","accounts","inProgress","account","helloData","setHelloData","acquireTokenSilent","scopes","apiHello","then","response","accessToken","endpoint","catch","error","acquireTokenPopup","console","log","Hello","authRequest","Redirect"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,0BAAT,EAAqCC,OAArC,EAA8CC,UAA9C,QAAgE,mBAAhE;AACA,SAASC,4BAAT,EAAuCC,eAAvC,QAA8D,qBAA9D;AAEA,SAASC,YAAT,EAAuBC,kBAAvB,QAAiD,eAAjD;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SAASC,SAAT,QAA0B,2BAA1B;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB;AACJ;AACA;AACA;AACA;AACA;AACI,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAAqCX,OAAO,EAAlD;AACA,QAAMY,OAAO,GAAGX,UAAU,CAACS,QAAQ,CAAC,CAAD,CAAR,IAAe,EAAhB,CAA1B;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,IAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,OAAO,IAAID,UAAU,KAAK,MAA1B,IAAoC,CAACE,SAAzC,EAAoD;AAChDJ,MAAAA,QAAQ,CAACM,kBAAT,CAA4B;AACxBC,QAAAA,MAAM,EAAEX,kBAAkB,CAACY,QAAnB,CAA4BD,MADZ;AAExBJ,QAAAA,OAAO,EAAEA;AAFe,OAA5B,EAGGM,IAHH,CAGSC,QAAD,IAAc;AAClBb,QAAAA,gBAAgB,CAACa,QAAQ,CAACC,WAAV,EAAuBf,kBAAkB,CAACY,QAAnB,CAA4BI,QAAnD,CAAhB,CACKH,IADL,CACUC,QAAQ,IAAIL,YAAY,CAACK,QAAD,CADlC;AAEH,OAND,EAMGG,KANH,CAMUC,KAAD,IAAW;AAChB;AACA,YAAIA,KAAK,YAAYrB,4BAArB,EAAmD;AAC/C,cAAIU,OAAO,IAAID,UAAU,KAAK,MAA9B,EAAsC;AAClCF,YAAAA,QAAQ,CAACe,iBAAT,CAA2B;AACvBR,cAAAA,MAAM,EAAEX,kBAAkB,CAACY,QAAnB,CAA4BD;AADb,aAA3B,EAEGE,IAFH,CAESC,QAAD,IAAc;AAClBb,cAAAA,gBAAgB,CAACa,QAAQ,CAACC,WAAV,EAAuBf,kBAAkB,CAACY,QAAnB,CAA4BI,QAAnD,CAAhB,CACKH,IADL,CACUC,QAAQ,IAAIL,YAAY,CAACK,QAAD,CADlC;AAEH,aALD,EAKGG,KALH,CAKSC,KAAK,IAAIE,OAAO,CAACC,GAAR,CAAYH,KAAZ,CALlB;AAMH;AACJ;AACJ,OAlBD;AAmBH;AACJ,GAtBQ,EAsBN,CAACX,OAAD,EAAUD,UAAV,EAAsBF,QAAtB,CAtBM,CAAT;AAwBA,sBACI;AAAA,cACMI,SAAS,gBAAG,QAAC,SAAD;AAAW,MAAA,SAAS,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAH,GAAyC;AADxD,mBADJ;AAKH,CAxCD;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhDML,Y;UAOyCR,O,EAC3BC,U;;;KARdO,Y;AAiDN,OAAO,MAAMmB,KAAK,GAAG,MAAM;AACvB,QAAMC,WAAW,GAAG,EAChB,GAAGxB;AADa,GAApB;AAIA,sBACI,QAAC,0BAAD;AACI,IAAA,eAAe,EAAED,eAAe,CAAC0B,QADrC;AAEI,IAAA,qBAAqB,EAAED,WAF3B;AAAA,2BAII,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAbM;MAAMD,K","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport { MsalAuthenticationTemplate, useMsal, useAccount } from \"@azure/msal-react\";\r\nimport { InteractionRequiredAuthError, InteractionType } from \"@azure/msal-browser\";\r\n\r\nimport { loginRequest, protectedResources } from \"../authConfig\";\r\nimport { callApiWithToken } from \"../fetch\";\r\nimport { HelloData } from \"../components/DataDisplay\";\r\n\r\nconst HelloContent = () => {\r\n    /**\r\n     * useMsal is hook that returns the PublicClientApplication instance, \r\n     * an array of all accounts currently signed in and an inProgress value \r\n     * that tells you what msal is currently doing. For more, visit: \r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n     */\r\n    const { instance, accounts, inProgress } = useMsal();\r\n    const account = useAccount(accounts[0] || {});\r\n    const [helloData, setHelloData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (account && inProgress === \"none\" && !helloData) {\r\n            instance.acquireTokenSilent({\r\n                scopes: protectedResources.apiHello.scopes,\r\n                account: account\r\n            }).then((response) => {\r\n                callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint)\r\n                    .then(response => setHelloData(response));\r\n            }).catch((error) => {\r\n                // in case if silent token acquisition fails, fallback to an interactive method\r\n                if (error instanceof InteractionRequiredAuthError) {\r\n                    if (account && inProgress === \"none\") {\r\n                        instance.acquireTokenPopup({\r\n                            scopes: protectedResources.apiHello.scopes,\r\n                        }).then((response) => {\r\n                            callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint)\r\n                                .then(response => setHelloData(response));\r\n                        }).catch(error => console.log(error));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }, [account, inProgress, instance]);\r\n  \r\n    return (\r\n        <>\r\n            { helloData ? <HelloData helloData={helloData} /> : null }\r\n        </>\r\n    );\r\n};\r\n\r\n/**\r\n * The `MsalAuthenticationTemplate` component will render its children if a user is authenticated \r\n * or attempt to sign a user in. Just provide it with the interaction type you would like to use \r\n * (redirect or popup) and optionally a [request object](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md)\r\n * to be passed to the login API, a component to display while authentication is in progress or a component to display if an error occurs. For more, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nexport const Hello = () => {\r\n    const authRequest = {\r\n        ...loginRequest\r\n    };\r\n\r\n    return (\r\n        <MsalAuthenticationTemplate \r\n            interactionType={InteractionType.Redirect} \r\n            authenticationRequest={authRequest}\r\n        >\r\n            <HelloContent />\r\n        </MsalAuthenticationTemplate>\r\n      )\r\n};"]},"metadata":{},"sourceType":"module"}